{"version":3,"sources":["components/Header.jsx","theme/index.js","store/filterSlice.js","components/Filter.jsx","store/taskSlice.js","components/EditModal.jsx","components/ListItem.jsx","components/List.jsx","components/AddModal.jsx","components/AddForm.jsx","components/MainContainer.jsx","store/index.js","components/calendar/Calendar.jsx","components/sidebar/weekDeadline.js","components/sidebar/Sidebar.jsx","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["Header","textAlign","p","mb","bgGradient","color","size","style","fontSize","role","theme","extendTheme","fonts","heading","body","FILTER_LIST","ALL","COMPLETED","INCOMPLETED","initialState","filterSlice","createSlice","name","reducers","toggle","state","action","payload","toggleFilter","createAction","filter","Filter","useSelector","dispatch","useDispatch","w","alignItems","columns","base","sm","spacing","md","Object","values","map","type","colorScheme","variant","onClick","sx","taskSlice","add","task","title","deadline","Date","toISOString","id","nanoid","completed","createTask","find","item","delete","edit","index","findIndex","addTask","toggleCompleted","deleteTask","editTask","EditModal","isOpen","onClose","inputRef","useRef","useForm","register","handleSubmit","errors","formState","initialFocusRef","isCentered","onSubmit","data","date","isInvalid","htmlFor","defaultValue","ref","required","message","substr","ListItem","props","useDisclosure","onOpen","doable","isAfter","parseISO","border","borderColor","borderRadius","boxShadow","bgColor","isDisabled","isChecked","onChange","e","target","checked","px","as","fontStyle","toLocaleString","year","month","day","ml","leftIcon","List","tasks","length","pt","spacingX","spacingY","minChildWidth","colSpan","AddModal","justifyContent","children","fontWeight","AddForm","placeholder","my","MainConatainer","maxWidth","pb","combineReducers","reducer","persistConfig","key","storage","persistedReducer","persistReducer","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","handleMouseEnter","arg","tippy","el","content","event","extendedProps","description","arrow","animation","MyCalendar","tasksList","start","console","log","shadow","plugins","dayGridPlugin","interactionPlugin","initialView","headerToolbar","center","end","views","dayGridMonth","titleFormat","events","eventMouseEnter","WeekDeadline","isThisWeek","weekStartsOn","mt","formatDistance","Sidebar","mr","App","loading","direction","gridGap","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.03442eaa.chunk.js","sourcesContent":["import { Heading, Box } from \"@chakra-ui/layout\";\r\n\r\n\r\nconst Header = () => {\r\n  return (\r\n    <Box \r\n      textAlign=\"center\" \r\n      p={20} \r\n      mb={20}\r\n      bgGradient=\"linear(to-l,#2a5298,#1e3c72,#2a5298)\"\r\n    >\r\n      <Heading\r\n        color=\"white\"\r\n        size='3xl'\r\n      >To-do List</Heading>\r\n      <span style={{fontSize: '3rem'}} role=\"img\">🚀</span>\r\n    </Box>\r\n  )\r\n};\r\n\r\nexport default Header;","import { extendTheme } from \"@chakra-ui/react\";\r\n\r\nconst theme = extendTheme({\r\n  fonts:{\r\n    heading:'Pacifico',\r\n    body:'Montserrat'\r\n  }\r\n});\r\n\r\nexport default theme;","import { createAction, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const FILTER_LIST = {\r\n  ALL: 'ALL',\r\n  COMPLETED: 'COMPLETED',\r\n  INCOMPLETED: 'INCOMPLETED'\r\n};\r\n\r\nconst initialState = FILTER_LIST.ALL;\r\n\r\nexport const filterSlice = createSlice({\r\n  name:\"filter\",\r\n  initialState,\r\n  reducers:{\r\n    toggle: (state, action) => {\r\n      state = action.payload;\r\n      return state;\r\n    }\r\n  }\r\n});\r\n\r\nexport const toggleFilter = createAction('filter/toggle', (filter) => ({\r\n  payload: filter\r\n}))\r\n\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { SimpleGrid, Text, VStack } from \"@chakra-ui/layout\"\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { FILTER_LIST, toggleFilter } from \"../store/filterSlice\";\r\n\r\nconst Filter = () => {\r\n  const filter = useSelector(state => state.filter);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <VStack w=\"full\" alignItems=\"center\" mb={8}>\r\n      <SimpleGrid columns={{base: 1, sm: 3}} spacing={4} w={{base: 'sm', md: 'lg'}}>\r\n        {Object.values(FILTER_LIST).map(type => (\r\n          <Button\r\n            colorScheme=\"teal\"\r\n            variant={type === filter ? \"solid\" : \"outline\"}\r\n            onClick={() => dispatch(toggleFilter(type))}\r\n          >\r\n            <Text fontSize={[\"md\",null,\"lg\"]} sx={{\"font-family\": \"'Acme', sans-serif\"}}>\r\n              {type}\r\n            </Text>\r\n          </Button>\r\n        ))}\r\n      </SimpleGrid>\r\n    </VStack>\r\n    \r\n  )\r\n};\r\n\r\nexport default Filter;","import { createAction, createSlice, nanoid } from \"@reduxjs/toolkit\";\r\n\r\nconst createTask = (title,deadline = new Date().toISOString()) => ({\r\n  id: nanoid(),\r\n  title,\r\n  completed: false,\r\n  deadline\r\n});\r\n\r\nconst initialState = [];\r\n\r\nexport const taskSlice = createSlice({\r\n  name:'tasks',\r\n  initialState,\r\n  reducers:{\r\n    add: (state, action) => {\r\n      const task = createTask(action.payload.title, action.payload.deadline);\r\n      return [...state, task];\r\n    },\r\n    toggle: (state, action) => {\r\n      const task = state.find(item => item.id === action.payload.id);\r\n      task.completed = action.payload.completed;\r\n    },\r\n    delete: (state, action) => {\r\n      return state.filter(item => item.id !== action.payload)\r\n    },\r\n    edit: (state, action) => {\r\n      const index = state.findIndex(item => item.id === action.payload.id);\r\n      state[index].title = action.payload.title;\r\n      state[index].deadline = action.payload.deadline;\r\n    }\r\n  }\r\n});\r\n\r\n\r\nexport const addTask = createAction('tasks/add', (title, deadline) => ({\r\n  payload: {title, deadline}\r\n}));\r\n\r\nexport const toggleCompleted = createAction('tasks/toggle', (id, completed) => ({\r\n  payload: {id, completed}\r\n}));\r\n\r\nexport const deleteTask = createAction('tasks/delete', (id) => ({\r\n  payload: id\r\n}));\r\n\r\nexport const editTask = createAction('tasks/edit', (id, title, deadline) => ({\r\n  payload: {id, title, deadline}\r\n}))\r\n\r\n\r\n\r\n\r\n\r\n","import {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n} from \"@chakra-ui/react\";\r\n\r\nimport { useRef } from \"react\";\r\nimport { Button } from \"@chakra-ui/button\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { editTask } from \"../store/taskSlice\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { FormControl, FormErrorMessage, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\n\r\nconst EditModal = ({isOpen, onClose, task, id, deadline}) => {\r\n  const inputRef = useRef();\r\n  const dispatch = useDispatch();\r\n  const { register, handleSubmit, formState: { errors }} = useForm();\r\n\r\n  function handleEdit(data){\r\n    const { task, date } = data;\r\n    dispatch(editTask(id, task, new Date(date).toISOString()));\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <Modal size='lg' isOpen={isOpen} onClose={onClose} initialFocusRef={inputRef} isCentered>\r\n      <ModalOverlay />\r\n        <ModalContent p={4}>\r\n          <ModalHeader>Edit Task</ModalHeader>\r\n          <ModalCloseButton />\r\n          <form onSubmit={handleSubmit(handleEdit)}>\r\n            <ModalBody>\r\n              <VStack spacing={4}>\r\n                <FormControl isInvalid={errors.task}>\r\n                  <FormLabel htmlFor=\"task_edit\">\r\n                    Task description\r\n                  </FormLabel>\r\n                  <Input\r\n                    id=\"task_edit\"\r\n                    type=\"text\"\r\n                    defaultValue={task}\r\n                    ref={inputRef}\r\n                    {...register(\"task\", {required:\"This is required!\"})}\r\n                  />\r\n                  <FormErrorMessage>\r\n                    {errors.task && <span>{errors.task.message}</span>}\r\n                  </FormErrorMessage>\r\n                </FormControl>\r\n\r\n                <FormControl isInvalid={errors.date}>\r\n                  <FormLabel htmlFor=\"deadline_edit\">\r\n                    Deadline\r\n                  </FormLabel>\r\n                  <Input\r\n                    id=\"deadline_edit\"\r\n                    type=\"date\"\r\n                    defaultValue={\r\n                      typeof deadline === 'object' ?\r\n                      deadline.toISOString().substr(0, 10) : deadline.substr(0,10)\r\n                      }\r\n                    {...register(\"date\", {required:\"This is required!\"})}\r\n                  />\r\n                  <FormErrorMessage>\r\n                    {errors.date && <span>{errors.date.message}</span>}\r\n                  </FormErrorMessage>\r\n                </FormControl>\r\n              </VStack>\r\n            </ModalBody>\r\n            \r\n            <ModalFooter>\r\n              <Button colorScheme=\"blue\" size=\"md\" type=\"submit\">\r\n                Save\r\n              </Button>\r\n            </ModalFooter>\r\n          </form>\r\n        </ModalContent>\r\n    </Modal>\r\n  )\r\n};\r\n\r\nexport default EditModal;","import { Button, ButtonGroup } from \"@chakra-ui/button\"\r\nimport { Checkbox } from \"@chakra-ui/checkbox\"\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Flex, HStack, Spacer, Text, VStack } from \"@chakra-ui/layout\";\r\nimport { isAfter, parseISO } from \"date-fns\";\r\nimport { MdDelete, MdEdit } from \"react-icons/md\"\r\nimport { useDispatch } from \"react-redux\";\r\nimport { toggleCompleted, deleteTask } from \"../store/taskSlice\";\r\nimport EditModal from \"./EditModal\";\r\n\r\nconst ListItem = (props) => {\r\n  const dispatch = useDispatch();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  const doable = isAfter(parseISO(props.deadline), new Date());\r\n\r\n  return(\r\n    <Flex \r\n      alignItems=\"center\" \r\n      border=\"1px\"\r\n      borderColor=\"gray.200\"\r\n      w=\"full\"\r\n      p={[2,4]}\r\n      borderRadius=\"lg\"\r\n      boxShadow=\"xl\"\r\n      bgColor={!doable && \"gray.100\"}\r\n    > \r\n      <HStack spacing={4}>\r\n        <Checkbox\r\n          isDisabled={!doable}\r\n          colorScheme=\"green\" \r\n          size=\"lg\"\r\n          isChecked={props.completed}\r\n          onChange={(e) => dispatch(toggleCompleted(props.id, e.target.checked))}\r\n        />\r\n        <VStack alignItems=\"flex-start\" px={4}>\r\n          <Text fontSize=\"lg\">{props.task}</Text>\r\n          <Text as='i'>\r\n            <span style={{fontStyle: 'normal'}}>⏰ </span>\r\n            Deadline: {new Date(props.deadline).toLocaleString('en-US',{year: 'numeric', month: 'long', day: 'numeric' })}\r\n          </Text>\r\n        </VStack>\r\n        \r\n      </HStack>\r\n      <Spacer/>\r\n      <HStack ml=\"auto\">\r\n        <ButtonGroup variant=\"solid\" size=\"xs\">\r\n\r\n          <Button leftIcon={<MdEdit/>} colorScheme=\"blue\" onClick={onOpen}>\r\n            Edit\r\n            <EditModal\r\n              task={props.task}\r\n              id={props.id}\r\n              isOpen={isOpen}\r\n              onClose={onClose}\r\n              deadline={props.deadline}\r\n            />\r\n          </Button>\r\n\r\n          <Button leftIcon={<MdDelete/>} colorScheme=\"red\"\r\n            onClick={() => dispatch(deleteTask(props.id))}\r\n          >\r\n            Delete\r\n          </Button>\r\n\r\n        </ButtonGroup>\r\n      </HStack>\r\n    </Flex>\r\n  )\r\n};\r\n\r\nexport default ListItem;","import { Center, GridItem, SimpleGrid, Text } from \"@chakra-ui/layout\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { FILTER_LIST } from \"../store/filterSlice\";\r\nimport ListItem from \"./ListItem\";\r\n\r\nconst List = () => {\r\n  var tasks = useSelector(state => state.tasks);\r\n  var filter = useSelector(state => state.filter);\r\n\r\n  if (tasks.length === 0){\r\n    return (\r\n      <Center pt={20} >\r\n        <Text \r\n          color=\"gray.400\" \r\n          sx={{\"font-family\": \"'Acme', sans-serif\"}}\r\n          fontSize=\"5xl\"\r\n        >Nothing to do...  ( ﾉ ﾟｰﾟ)ﾉ</Text>\r\n      </Center>\r\n    )\r\n  }\r\n\r\n  if(filter === FILTER_LIST.COMPLETED){\r\n    tasks = tasks.filter(task => task.completed === true);\r\n  }else if(filter === FILTER_LIST.INCOMPLETED){\r\n    tasks = tasks.filter(task => task.completed === false);\r\n  }\r\n  \r\n  return (\r\n    <SimpleGrid \r\n      columns={[1,2]} \r\n      spacingX={20}\r\n      spacingY={12}\r\n      minChildWidth=\"24rem\"\r\n      px={[0,8]}\r\n    >\r\n      {tasks.map(task => (\r\n        <GridItem colSpan={1}>\r\n          <ListItem key={task.id} id={task.id} task={task.title} completed={task.completed}\r\n            deadline={task.deadline}\r\n          />\r\n        </GridItem>   \r\n      ))}\r\n    </SimpleGrid>\r\n  )\r\n};\r\n\r\nexport default List;\r\n","import {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n} from \"@chakra-ui/react\";\r\nimport { Flex, Box, Text } from \"@chakra-ui/layout\";\r\n\r\nconst AddModal = (props) => {\r\n  return (\r\n    <Flex w=\"full\" justifyContent=\"center\" mb={8}>\r\n      <Modal size='lg' \r\n        isCentered \r\n        isOpen={props.isOpen}\r\n        onOpen={props.onOpen}\r\n        onClose={props.onClose}\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent p={4}>\r\n          <ModalHeader>Add Task</ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody>\r\n            {props.children}\r\n          </ModalBody>\r\n        </ModalContent>\r\n      </Modal>\r\n      <Box\r\n        as=\"button\"\r\n        p={4} \r\n        onClick={props.onOpen} \r\n        w={['sm',null,'lg']}\r\n        borderRadius=\"15px\"\r\n        sx={{\r\n          \"background-image\": \"linear-gradient(to right, #314755 0%, #26a0da  51%, #314755  100%)\",\r\n          \"background-size\": \"200% auto\",\r\n          \"transition\": \"0.5s\",\r\n\r\n          \"&:hover\":{\r\n            \"background-position\":\"right center\"\r\n          }\r\n        }}\r\n      >\r\n        <Text fontSize='xl' fontWeight=\"bold\" color=\"white\" >\r\n            ADD TASK\r\n        </Text>\r\n      </Box>\r\n    </Flex>\r\n  )\r\n};\r\n\r\nexport default AddModal;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormErrorMessage, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTask } from \"../store/taskSlice\";\r\nimport AddModal from \"./AddModal\";\r\n\r\nconst AddForm = () => {\r\n  const { register, handleSubmit, formState: { errors } } = useForm();\r\n\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  function onSubmit(data) {\r\n    dispatch(addTask(data.task,new Date(data.deadline).toISOString()));\r\n    onClose();\r\n  }\r\n\r\n  return (\r\n    <AddModal\r\n      isOpen={isOpen}\r\n      onOpen={onOpen}\r\n      onClose={onClose}\r\n    >\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <VStack spacing={4}>\r\n          <FormControl isInvalid={errors.task}>\r\n            <FormLabel htmlFor=\"task\">\r\n              Task discription\r\n            </FormLabel>\r\n            <Input\r\n              type=\"text\"\r\n              id=\"task\"\r\n              placeholder=\"What to do ...\"\r\n              {...register(\"task\", {required: \"This is required!\"})}\r\n            />\r\n            <FormErrorMessage>\r\n              {errors.task && <span>{errors.task.message}</span>}\r\n            </FormErrorMessage>\r\n          </FormControl>\r\n\r\n          <FormControl isInvalid={errors.deadline}>\r\n            <FormLabel htmlFor=\"deadline\">\r\n              Deadline\r\n            </FormLabel>\r\n            <Input\r\n              type=\"date\"\r\n              id=\"deadline\"\r\n              {...register(\"deadline\", {required: \"This is required!\"})}\r\n            />\r\n            <FormErrorMessage>\r\n              {errors.deadline && <span>{errors.deadline.message}</span>}\r\n            </FormErrorMessage>\r\n          </FormControl>\r\n\r\n          <Button colorScheme=\"teal\" size=\"lg\" type=\"submit\" my={4}>\r\n            Add task\r\n          </Button>\r\n        </VStack>\r\n      </form>\r\n    </AddModal>\r\n  )\r\n};\r\n\r\nexport default AddForm;","import { Container } from \"@chakra-ui/layout\"\r\nimport Filter from \"./Filter\";\r\nimport List from \"./List\";\r\nimport AddForm from \"./AddForm\";\r\n\r\nconst MainConatainer = () => {\r\n  return (\r\n    <Container maxWidth=\"container.xl\" pb={20}>\r\n      <AddForm />\r\n      <Filter />\r\n      <List/>\r\n    </Container>\r\n  )\r\n};\r\n\r\nexport default MainConatainer;","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport { filterSlice } from \"./filterSlice\";\r\nimport { taskSlice } from \"./taskSlice\";\r\nimport { combineReducers } from \"redux\";\r\nimport storage from 'redux-persist/lib/storage';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n\r\nconst reducers = combineReducers({\r\n  tasks: taskSlice.reducer,\r\n  filter: filterSlice.reducer\r\n});\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, reducers);\r\n\r\nexport const store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }),\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n","import FullCalendar from '@fullcalendar/react';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport interactionPlugin from '@fullcalendar/interaction';\r\nimport { Box, Heading } from '@chakra-ui/layout';\r\nimport tippy from 'tippy.js';\r\n\r\nimport 'tippy.js/themes/light-border.css';\r\nimport 'tippy.js/animations/scale.css';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst handleMouseEnter = (arg) => {\r\n  tippy(arg.el, {\r\n    content: arg.event.extendedProps.description,\r\n    theme: \"light-border\",\r\n    arrow: false,\r\n    animation: 'scale'\r\n  })\r\n};\r\n\r\nconst MyCalendar = () => {\r\n  const tasks = useSelector(state => state.tasks)\r\n\r\n  const tasksList = tasks.map(task => ({\r\n    title: 'DL',\r\n    description: task.title,\r\n    start: task.deadline.substr(0,10)\r\n  }))\r\n\r\n  console.log(tasksList)\r\n\r\n  return (\r\n    <Box \r\n      w=\"full\"\r\n      p={4}\r\n      shadow=\"md\"\r\n      sx={{\r\n        'background-color': '#FEF5ED'\r\n      }}\r\n    >\r\n      <Heading textAlign=\"center\" mb={4} sx={{'color':'#2F86A6'}}>Calendar</Heading>\r\n      <Box bgColor=\"white\" p={4}>\r\n        <FullCalendar\r\n          plugins={[dayGridPlugin, interactionPlugin]}\r\n          initialView=\"dayGridMonth\"\r\n          headerToolbar={{\r\n            start:'title',\r\n            center:'',\r\n            end:'prev,next'\r\n          }}\r\n          views={\r\n            {\r\n              dayGridMonth:{\r\n                titleFormat:{month:'long', year:'numeric'}\r\n              }\r\n            }\r\n          }\r\n          events={tasksList}\r\n          eventMouseEnter={handleMouseEnter}\r\n        />\r\n      </Box>\r\n      \r\n    </Box>\r\n  )\r\n};\r\n\r\nexport default MyCalendar;","import { Heading, List, ListItem, Text, Box } from \"@chakra-ui/layout\"\r\nimport { formatDistance, isAfter, isThisWeek, parseISO } from \"date-fns\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction calculateTimeLeft(deadline){\r\n  let res = formatDistance(deadline, new Date());\r\n  return res;\r\n}\r\n\r\nconst WeekDeadline = () => {\r\n  let tasks = useSelector(state => state.tasks);\r\n\r\n  tasks = tasks\r\n  .map(task => {\r\n    return {...task, deadline: parseISO(task.deadline)};\r\n  })\r\n\r\n  console.log(tasks);\r\n\r\n  tasks = tasks.filter(task => task.completed === false && isThisWeek(task.deadline, {weekStartsOn: 1}) && isAfter(task.deadline, new Date()))\r\n\r\n\r\n  return (\r\n    <Box shadow=\"lg\" p={8} bgColor=\"gray.100\">\r\n      <Heading as=\"u\" sx={{\r\n        \"color\": \"#C37B89\"\r\n      }}>This week's deadlines</Heading>\r\n\r\n      <List spacing={4} mt={4}>\r\n        {\r\n          tasks.map(task => (\r\n            <ListItem>\r\n              <Text fontSize={20}>✨{task.title}{` (${calculateTimeLeft(task.deadline)} left)`}</Text>\r\n            </ListItem>\r\n          ))\r\n        }\r\n      </List>\r\n    </Box>\r\n  )\r\n};\r\n\r\nexport default WeekDeadline;\r\n\r\n\r\n\r\n","import { Box, VStack } from \"@chakra-ui/layout\";\r\nimport MyCalendar from \"../calendar/Calendar\";\r\nimport WeekDeadline from \"./weekDeadline\";\r\n\r\n\r\nconst Sidebar = () => {\r\n\r\n  return (\r\n    <Box \r\n      p={4}\r\n      mr={{base: 0, md: 12}}\r\n      w={{base: 'full', md: 'lg'}}\r\n      maxWidth=\"2xl\" \r\n    >\r\n      <VStack spacing={20}>\r\n        <WeekDeadline />\r\n        <MyCalendar />\r\n      </VStack>\r\n    </Box>\r\n    \r\n  )\r\n};\r\n\r\nexport default Sidebar;","import React from 'react';\nimport { ChakraProvider } from '@chakra-ui/react';\nimport Header from './components/Header';\nimport theme from './theme';\nimport \"./theme/styles.css\";\nimport \"@fontsource/pacifico\";\nimport MainConatainer from './components/MainContainer';\nimport { Provider } from 'react-redux';\nimport { persistor, store } from './store';\n\nimport { Flex } from '@chakra-ui/layout';\nimport Sidebar from './components/sidebar/Sidebar';\n\nimport { PersistGate } from 'redux-persist/integration/react';\n\n\nconst App = () => {\n  return (\n    <ChakraProvider theme={theme}>\n      <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n          <Header/>\n          <Flex \n            direction={{base: 'column', md: 'row'}}\n            gridGap={10} \n          >\n            <MainConatainer/>\n            <Sidebar />\n          </Flex>\n        </PersistGate>\n      </Provider>\n    </ChakraProvider>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}